name: Docker Build and Push

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=,suffix=,format=long
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

      - name: Scan image for vulnerabilities
        uses: anchore/scan-action@v3
        with:
          image: ${{ steps.meta.outputs.tags }}
          fail-build: false
          severity-cutoff: high

  test-image:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: docker-build
    if: success()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: bookdiscovery:test
          load: true

      - name: Run container health check
        run: |
          docker run -d -p 3000:3000 --name bookdiscovery-test bookdiscovery:test
          sleep 10
          
          # Health check
          curl -f http://localhost:3000 || exit 1
          echo "✅ Container is healthy"
          
          # Cleanup
          docker stop bookdiscovery-test
          docker rm bookdiscovery-test

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [docker-build, test-image]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Preview Environment
        run: |
          echo "🚀 Deploying preview for PR #${{ github.event.number }}"
          # Aquí puedes agregar lógica para desplegar en un entorno de preview
          # Por ejemplo: Vercel Preview, Railway, etc.

  report:
    name: Docker Build Report
    runs-on: ubuntu-latest
    needs: [docker-build, test-image]
    if: always()

    steps:
      - name: Generate build summary
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📦 Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Test:** ${{ needs.test-image.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.docker-build.result }}" == "success" ] && [ "${{ needs.test-image.result }}" == "success" ]; then
            echo "✅ **Overall Status:** Docker image built and tested successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Overall Status:** Docker build or test failed" >> $GITHUB_STEP_SUMMARY
          fi