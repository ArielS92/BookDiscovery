name: Tests on Pull Request

on:
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: read

env:
  NODE_ENV: test

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-
          ${{ runner.os }}-node-
          ${{ runner.os }}-

    - name: Install dependencies
      run: |
        npm ci
        npm cache clean --force

    - name: Run type check
      run: npm run type-check

    - name: Run tests
      run: npm test -- --run

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.node-version }}
        path: coverage/
        if-no-files-found: ignore

  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Check build
      run: npm run build

  report:
    name: Test Summary Report
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: always()

    steps:
    - name: Generate test summary
      run: |
        echo "## üìä Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üìã Job Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Unit Tests:** ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Lint & Build:** ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.lint.result }}" == "success" ]; then
          echo "‚úÖ **Overall Status:** All checks passed" >> $GITHUB_STEP_SUMMARY
          echo "exit 0" >> $GITHUB_ENV
        else
          echo "‚ùå **Overall Status:** Some checks failed" >> $GITHUB_STEP_SUMMARY
          echo "exit 1" >> $GITHUB_ENV
        fi

    - name: Set final status
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.lint.result }}" == "success" ]; then
          echo "‚úÖ All checks passed"
          exit 0
        else
          echo "‚ùå Some checks failed"
          exit 1
        fi